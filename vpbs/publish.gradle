apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            name "nexus"
            credentials {
                username nexusUsername
                password nexusPassword
            }
            url project.android.defaultConfig.versionName.endsWith('-SNAPSHOT') ? nexusSnapshotsRepository : nexusReleasesRepository
        }
    }

    publications {
        android.libraryVariants.each { variant ->
            if (variant.buildType.name == "release") {
                "${variant.name}"(MavenPublication) {
                    groupId project.group
                    artifactId project.archivesBaseName
                    version project.android.defaultConfig.versionName

                    artifact tasks["bundle${variant.name.capitalize()}"]
                    artifact tasks["generate${variant.name.capitalize()}SourcesJar"]

                    pom.withXml {
                        def rootNode = asNode()

                        rootNode.appendNode('name', project.title)
                        rootNode.appendNode('description', project.description)
                        rootNode.appendNode('url', project.scm.url)

                        def developersNode = rootNode.appendNode('developers')
                        project.developers.each {
                            def developerNode = developersNode.appendNode('developer')
                            it.each { name, value -> developerNode.appendNode(name, value) }
                        }

                        def scmNode = rootNode.appendNode('scm')
                        project.scm.each { name, value -> scmNode.appendNode(name, value) }

                        def dependenciesNode = rootNode.appendNode('dependencies')
                        variant.compileConfiguration.allDependencies.each {
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)

                            if (!it.excludeRules.empty) {
                                def exclusionsNode = dependencyNode.appendNode('exclusions')
                                it.excludeRules.each { rule ->
                                    def exclusionNode = exclusionsNode.appendNode('exclusion')
                                    exclusionNode.appendNode('groupId', rule.group)
                                    exclusionNode.appendNode('artifactId', rule.module)
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

android.libraryVariants.all { variant ->
    if (variant.buildType.name == 'release') {
        model {
            tasks."generatePomFileFor${variant.name.capitalize()}Publication" {
                destination = new File(destination.parent, "${buildLibraryArchiveBaseName(variant)}-pom.xml")
            }
        }
    }
}
